@model PaginatedList<SurfsProject.Models.Surfboard>

@{
    ViewData["Title"] = "Rent Boards";
}


<h1>Rent Boards</h1>
<table class="table table-hover table-borderless">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" style="text-decoration: none;">@Html.DisplayName("Name")</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["LengthSortParm"]" style="text-decoration: none;">@Html.DisplayName("Length")</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["WidthSortParm"]" style="text-decoration: none;">@Html.DisplayName("Width")</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["ThicknessSortParm"]" style="text-decoration: none;">@Html.DisplayName("Thickness")</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["VolumeSortParm"]" style="text-decoration: none;">@Html.DisplayName("Volume")</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["TypeSortParm"]" style="text-decoration: none;">@Html.DisplayName("Type")</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]" style="text-decoration: none;">@Html.DisplayName("Price")</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["EquipmentSortParm"]" style="text-decoration: none;">@Html.DisplayName("Equipment")</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        @{
            var availableBoards = Model.ToList();

            foreach (var item in availableBoards)
            {
                <tr>
                    <th>
                        @Html.DisplayFor(modelitem => item.Name)    
                    </th>
                    <th>
                        @Html.DisplayFor(modelitem => item.Length)
                    </th>
                    <th>
                        @Html.DisplayFor(modelitem => item.Width)
                    </th>
                    <th>
                        @Html.DisplayFor(modelitem => item.Thickness)
                    </th>
                    <th>
                        @Html.DisplayFor(modelitem => item.Volume)
                    </th>
                    <th>
                        @Html.DisplayFor(modelitem => item.Type)
                    </th>
                    <th>
                        @Html.DisplayFor(modelitem => item.Price)
                    </th>
                    <th>
                        @Html.DisplayFor(modelitem => item.Equipment)
                    </th>

                    @if (User.Identity.IsAuthenticated && item.Rentee == null)
                    {
                        <th>
                            <form asp-action="Rent" asp-route-id="@item.Id" method="post">
                                <button type="submit" class="btn btn-outline-dark">Rent</button>
                            </form>
                        </th>
                    }

                </tr>
            }
        }
        
    </tbody>
</table>


@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled" style="background-color:lightgrey">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled" style="background-color:lightblue">
    Next
</a>